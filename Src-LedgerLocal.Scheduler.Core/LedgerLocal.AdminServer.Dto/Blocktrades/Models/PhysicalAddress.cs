/*
 * Restler API Explorer
 *
 * Live API Documentation
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// PhysicalAddress Model
    /// </summary>
    [DataContract]
    public partial class PhysicalAddress : IEquatable<PhysicalAddress>
    { 
        /// <summary>
        /// id of country
        /// </summary>
        /// <value>id of country</value>
        [Required]
        [DataMember(Name="countryId")]
        public string CountryId { get; set; }

        /// <summary>
        /// postal code
        /// </summary>
        /// <value>postal code</value>
        [Required]
        [DataMember(Name="zip")]
        public string Zip { get; set; }

        /// <summary>
        /// city/locality name
        /// </summary>
        /// <value>city/locality name</value>
        [Required]
        [DataMember(Name="city")]
        public string City { get; set; }

        /// <summary>
        /// district, province
        /// </summary>
        /// <value>district, province</value>
        [Required]
        [DataMember(Name="administrativeArea")]
        public string AdministrativeArea { get; set; }

        /// <summary>
        /// dependent locality (in: BR, CN, IR, MY, MX, NZ, PH, KR, ZA, TH)
        /// </summary>
        /// <value>dependent locality (in: BR, CN, IR, MY, MX, NZ, PH, KR, ZA, TH)</value>
        [Required]
        [DataMember(Name="dependentLocality")]
        public string DependentLocality { get; set; }

        /// <summary>
        /// sorting code
        /// </summary>
        /// <value>sorting code</value>
        [Required]
        [DataMember(Name="sortingCode")]
        public string SortingCode { get; set; }

        /// <summary>
        /// organization
        /// </summary>
        /// <value>organization</value>
        [Required]
        [DataMember(Name="organization")]
        public string Organization { get; set; }

        /// <summary>
        /// the address specified by user
        /// </summary>
        /// <value>the address specified by user</value>
        [Required]
        [DataMember(Name="addressLine1")]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// the address specified by user
        /// </summary>
        /// <value>the address specified by user</value>
        [Required]
        [DataMember(Name="addressLine2")]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PhysicalAddress {\n");
            sb.Append("  CountryId: ").Append(CountryId).Append("\n");
            sb.Append("  Zip: ").Append(Zip).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  AdministrativeArea: ").Append(AdministrativeArea).Append("\n");
            sb.Append("  DependentLocality: ").Append(DependentLocality).Append("\n");
            sb.Append("  SortingCode: ").Append(SortingCode).Append("\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PhysicalAddress)obj);
        }

        /// <summary>
        /// Returns true if PhysicalAddress instances are equal
        /// </summary>
        /// <param name="other">Instance of PhysicalAddress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PhysicalAddress other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CountryId == other.CountryId ||
                    CountryId != null &&
                    CountryId.Equals(other.CountryId)
                ) && 
                (
                    Zip == other.Zip ||
                    Zip != null &&
                    Zip.Equals(other.Zip)
                ) && 
                (
                    City == other.City ||
                    City != null &&
                    City.Equals(other.City)
                ) && 
                (
                    AdministrativeArea == other.AdministrativeArea ||
                    AdministrativeArea != null &&
                    AdministrativeArea.Equals(other.AdministrativeArea)
                ) && 
                (
                    DependentLocality == other.DependentLocality ||
                    DependentLocality != null &&
                    DependentLocality.Equals(other.DependentLocality)
                ) && 
                (
                    SortingCode == other.SortingCode ||
                    SortingCode != null &&
                    SortingCode.Equals(other.SortingCode)
                ) && 
                (
                    Organization == other.Organization ||
                    Organization != null &&
                    Organization.Equals(other.Organization)
                ) && 
                (
                    AddressLine1 == other.AddressLine1 ||
                    AddressLine1 != null &&
                    AddressLine1.Equals(other.AddressLine1)
                ) && 
                (
                    AddressLine2 == other.AddressLine2 ||
                    AddressLine2 != null &&
                    AddressLine2.Equals(other.AddressLine2)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CountryId != null)
                    hashCode = hashCode * 59 + CountryId.GetHashCode();
                    if (Zip != null)
                    hashCode = hashCode * 59 + Zip.GetHashCode();
                    if (City != null)
                    hashCode = hashCode * 59 + City.GetHashCode();
                    if (AdministrativeArea != null)
                    hashCode = hashCode * 59 + AdministrativeArea.GetHashCode();
                    if (DependentLocality != null)
                    hashCode = hashCode * 59 + DependentLocality.GetHashCode();
                    if (SortingCode != null)
                    hashCode = hashCode * 59 + SortingCode.GetHashCode();
                    if (Organization != null)
                    hashCode = hashCode * 59 + Organization.GetHashCode();
                    if (AddressLine1 != null)
                    hashCode = hashCode * 59 + AddressLine1.GetHashCode();
                    if (AddressLine2 != null)
                    hashCode = hashCode * 59 + AddressLine2.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PhysicalAddress left, PhysicalAddress right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PhysicalAddress left, PhysicalAddress right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
