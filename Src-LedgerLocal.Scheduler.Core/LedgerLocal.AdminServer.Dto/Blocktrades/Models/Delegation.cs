/*
 * Restler API Explorer
 *
 * Live API Documentation
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Delegation Model
    /// </summary>
    [DataContract]
    public partial class Delegation : IEquatable<Delegation>
    { 
        /// <summary>
        /// An id that uniquely identifies this delegation
        /// </summary>
        /// <value>An id that uniquely identifies this delegation</value>
        [Required]
        [DataMember(Name="delegationId")]
        public string DelegationId { get; set; }

        /// <summary>
        /// the current status of the delegation (e.g., &#39;active&#39; or &#39;expired&#39;)
        /// </summary>
        /// <value>the current status of the delegation (e.g., &#39;active&#39; or &#39;expired&#39;)</value>
        [Required]
        [DataMember(Name="status")]
        public string Status { get; set; }

        /// <summary>
        /// the amount of vests delegated
        /// </summary>
        /// <value>the amount of vests delegated</value>
        [Required]
        [DataMember(Name="vestsDelegated")]
        public string VestsDelegated { get; set; }

        /// <summary>
        /// the approximate amount of Steem Power delegated (this is just the vestsDelegated, converted in to STEEM units at the current rate)
        /// </summary>
        /// <value>the approximate amount of Steem Power delegated (this is just the vestsDelegated, converted in to STEEM units at the current rate)</value>
        [Required]
        [DataMember(Name="steemPowerDelegated")]
        public string SteemPowerDelegated { get; set; }

        /// <summary>
        /// the time the delegation began
        /// </summary>
        /// <value>the time the delegation began</value>
        [Required]
        [DataMember(Name="startTime")]
        public string StartTime { get; set; }

        /// <summary>
        /// the time the delegation ended or will end
        /// </summary>
        /// <value>the time the delegation ended or will end</value>
        [Required]
        [DataMember(Name="endTime")]
        public string EndTime { get; set; }

        /// <summary>
        /// the name of the steem account receiving the deelgation
        /// </summary>
        /// <value>the name of the steem account receiving the deelgation</value>
        [Required]
        [DataMember(Name="steemAccount")]
        public string SteemAccount { get; set; }

        /// <summary>
        /// the time the delegation record was last updated
        /// </summary>
        /// <value>the time the delegation record was last updated</value>
        [Required]
        [DataMember(Name="lastModifiedTime")]
        public string LastModifiedTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Delegation {\n");
            sb.Append("  DelegationId: ").Append(DelegationId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  VestsDelegated: ").Append(VestsDelegated).Append("\n");
            sb.Append("  SteemPowerDelegated: ").Append(SteemPowerDelegated).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  SteemAccount: ").Append(SteemAccount).Append("\n");
            sb.Append("  LastModifiedTime: ").Append(LastModifiedTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Delegation)obj);
        }

        /// <summary>
        /// Returns true if Delegation instances are equal
        /// </summary>
        /// <param name="other">Instance of Delegation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Delegation other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DelegationId == other.DelegationId ||
                    DelegationId != null &&
                    DelegationId.Equals(other.DelegationId)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    VestsDelegated == other.VestsDelegated ||
                    VestsDelegated != null &&
                    VestsDelegated.Equals(other.VestsDelegated)
                ) && 
                (
                    SteemPowerDelegated == other.SteemPowerDelegated ||
                    SteemPowerDelegated != null &&
                    SteemPowerDelegated.Equals(other.SteemPowerDelegated)
                ) && 
                (
                    StartTime == other.StartTime ||
                    StartTime != null &&
                    StartTime.Equals(other.StartTime)
                ) && 
                (
                    EndTime == other.EndTime ||
                    EndTime != null &&
                    EndTime.Equals(other.EndTime)
                ) && 
                (
                    SteemAccount == other.SteemAccount ||
                    SteemAccount != null &&
                    SteemAccount.Equals(other.SteemAccount)
                ) && 
                (
                    LastModifiedTime == other.LastModifiedTime ||
                    LastModifiedTime != null &&
                    LastModifiedTime.Equals(other.LastModifiedTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DelegationId != null)
                    hashCode = hashCode * 59 + DelegationId.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (VestsDelegated != null)
                    hashCode = hashCode * 59 + VestsDelegated.GetHashCode();
                    if (SteemPowerDelegated != null)
                    hashCode = hashCode * 59 + SteemPowerDelegated.GetHashCode();
                    if (StartTime != null)
                    hashCode = hashCode * 59 + StartTime.GetHashCode();
                    if (EndTime != null)
                    hashCode = hashCode * 59 + EndTime.GetHashCode();
                    if (SteemAccount != null)
                    hashCode = hashCode * 59 + SteemAccount.GetHashCode();
                    if (LastModifiedTime != null)
                    hashCode = hashCode * 59 + LastModifiedTime.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Delegation left, Delegation right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Delegation left, Delegation right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
