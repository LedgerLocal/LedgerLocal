/*
 * Restler API Explorer
 *
 * Live API Documentation
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// WalletInfo Model
    /// </summary>
    [DataContract]
    public partial class WalletInfo : IEquatable<WalletInfo>
    { 
        /// <summary>
        /// A string that uniquely identifies this cryptocoin wallet. This is used whenever you want to refer to a specific wallet in the BlockTrades API.
        /// </summary>
        /// <value>A string that uniquely identifies this cryptocoin wallet. This is used whenever you want to refer to a specific wallet in the BlockTrades API.</value>
        [Required]
        [DataMember(Name="walletType")]
        public string WalletType { get; set; }

        /// <summary>
        /// The common name of this wallet, suitable for displaying to the user
        /// </summary>
        /// <value>The common name of this wallet, suitable for displaying to the user</value>
        [Required]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// If true, this wallet is able to generate unique input addresses which it can use to determine what address &amp; coin type to output. In this case, the user will not need to send a memo with the transaction. This may be null if the wallet is not currently supported.
        /// </summary>
        /// <value>If true, this wallet is able to generate unique input addresses which it can use to determine what address &amp; coin type to output. In this case, the user will not need to send a memo with the transaction. This may be null if the wallet is not currently supported.</value>
        [Required]
        [DataMember(Name="supportsInputToUniqueAddress")]
        public string SupportsInputToUniqueAddress { get; set; }

        /// <summary>
        /// If true, this wallet is able to accept deposits from multiple users to a shared address. The output address and coin type will be determined by a memo or data sent along with the transaction. This may be null if the wallet is not currently supported.
        /// </summary>
        /// <value>If true, this wallet is able to accept deposits from multiple users to a shared address. The output address and coin type will be determined by a memo or data sent along with the transaction. This may be null if the wallet is not currently supported.</value>
        [Required]
        [DataMember(Name="supportsInputToSharedAddressWithMemo")]
        public string SupportsInputToSharedAddressWithMemo { get; set; }

        /// <summary>
        /// The default type of address returned by the API if you don&#39;t specify one yourself. This will be either \&quot;unique_address\&quot; or \&quot;shared_address_with_memo\&quot;, or may be null if the wallet is not currently supported.
        /// </summary>
        /// <value>The default type of address returned by the API if you don&#39;t specify one yourself. This will be either \&quot;unique_address\&quot; or \&quot;shared_address_with_memo\&quot;, or may be null if the wallet is not currently supported.</value>
        [Required]
        [DataMember(Name="defaultInputAddressType")]
        public string DefaultInputAddressType { get; set; }

        /// <summary>
        /// Extra data about this wallet, which may include information about the types of addresses it supports and the blockchain explorer links.
        /// </summary>
        /// <value>Extra data about this wallet, which may include information about the types of addresses it supports and the blockchain explorer links.</value>
        [DataMember(Name="extraData")]
        public string ExtraData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WalletInfo {\n");
            sb.Append("  WalletType: ").Append(WalletType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SupportsInputToUniqueAddress: ").Append(SupportsInputToUniqueAddress).Append("\n");
            sb.Append("  SupportsInputToSharedAddressWithMemo: ").Append(SupportsInputToSharedAddressWithMemo).Append("\n");
            sb.Append("  DefaultInputAddressType: ").Append(DefaultInputAddressType).Append("\n");
            sb.Append("  ExtraData: ").Append(ExtraData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((WalletInfo)obj);
        }

        /// <summary>
        /// Returns true if WalletInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of WalletInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WalletInfo other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    WalletType == other.WalletType ||
                    WalletType != null &&
                    WalletType.Equals(other.WalletType)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    SupportsInputToUniqueAddress == other.SupportsInputToUniqueAddress ||
                    SupportsInputToUniqueAddress != null &&
                    SupportsInputToUniqueAddress.Equals(other.SupportsInputToUniqueAddress)
                ) && 
                (
                    SupportsInputToSharedAddressWithMemo == other.SupportsInputToSharedAddressWithMemo ||
                    SupportsInputToSharedAddressWithMemo != null &&
                    SupportsInputToSharedAddressWithMemo.Equals(other.SupportsInputToSharedAddressWithMemo)
                ) && 
                (
                    DefaultInputAddressType == other.DefaultInputAddressType ||
                    DefaultInputAddressType != null &&
                    DefaultInputAddressType.Equals(other.DefaultInputAddressType)
                ) && 
                (
                    ExtraData == other.ExtraData ||
                    ExtraData != null &&
                    ExtraData.Equals(other.ExtraData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (WalletType != null)
                    hashCode = hashCode * 59 + WalletType.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (SupportsInputToUniqueAddress != null)
                    hashCode = hashCode * 59 + SupportsInputToUniqueAddress.GetHashCode();
                    if (SupportsInputToSharedAddressWithMemo != null)
                    hashCode = hashCode * 59 + SupportsInputToSharedAddressWithMemo.GetHashCode();
                    if (DefaultInputAddressType != null)
                    hashCode = hashCode * 59 + DefaultInputAddressType.GetHashCode();
                    if (ExtraData != null)
                    hashCode = hashCode * 59 + ExtraData.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(WalletInfo left, WalletInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(WalletInfo left, WalletInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
