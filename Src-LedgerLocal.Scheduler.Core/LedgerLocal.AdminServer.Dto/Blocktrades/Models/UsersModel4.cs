/*
 * Restler API Explorer
 *
 * Live API Documentation
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// UsersModel4 Model
    /// </summary>
    [DataContract]
    public partial class UsersModel4 : IEquatable<UsersModel4>
    { 
        /// <summary>
        /// user&#39;s uuid
        /// </summary>
        /// <value>user&#39;s uuid</value>
        [Required]
        [DataMember(Name="userId")]
        public string UserId { get; set; }

        /// <summary>
        /// restoration token
        /// </summary>
        /// <value>restoration token</value>
        [Required]
        [DataMember(Name="restorationId")]
        public string RestorationId { get; set; }

        /// <summary>
        /// user&#39;s new password
        /// </summary>
        /// <value>user&#39;s new password</value>
        [Required]
        [DataMember(Name="password")]
        public string Password { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UsersModel4 {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  RestorationId: ").Append(RestorationId).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UsersModel4)obj);
        }

        /// <summary>
        /// Returns true if UsersModel4 instances are equal
        /// </summary>
        /// <param name="other">Instance of UsersModel4 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UsersModel4 other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    UserId == other.UserId ||
                    UserId != null &&
                    UserId.Equals(other.UserId)
                ) && 
                (
                    RestorationId == other.RestorationId ||
                    RestorationId != null &&
                    RestorationId.Equals(other.RestorationId)
                ) && 
                (
                    Password == other.Password ||
                    Password != null &&
                    Password.Equals(other.Password)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (UserId != null)
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                    if (RestorationId != null)
                    hashCode = hashCode * 59 + RestorationId.GetHashCode();
                    if (Password != null)
                    hashCode = hashCode * 59 + Password.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UsersModel4 left, UsersModel4 right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UsersModel4 left, UsersModel4 right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
