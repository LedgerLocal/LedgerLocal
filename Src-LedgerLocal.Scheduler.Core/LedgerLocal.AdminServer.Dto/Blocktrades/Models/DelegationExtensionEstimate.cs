/*
 * Restler API Explorer
 *
 * Live API Documentation
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// DelegationExtensionEstimate Model
    /// </summary>
    [DataContract]
    public partial class DelegationExtensionEstimate : IEquatable<DelegationExtensionEstimate>
    { 
        /// <summary>
        /// An id that uniquely identifies this delegation
        /// </summary>
        /// <value>An id that uniquely identifies this delegation</value>
        [Required]
        [DataMember(Name="delegationId")]
        public string DelegationId { get; set; }

        /// <summary>
        /// the amount of vests delegated
        /// </summary>
        /// <value>the amount of vests delegated</value>
        [Required]
        [DataMember(Name="vestsDelegated")]
        public string VestsDelegated { get; set; }

        /// <summary>
        /// the approximate amount of Steem Power delegated (this is just the vestsDelegated, converted in to STEEM units at the current rate)
        /// </summary>
        /// <value>the approximate amount of Steem Power delegated (this is just the vestsDelegated, converted in to STEEM units at the current rate)</value>
        [Required]
        [DataMember(Name="steemPowerDelegated")]
        public string SteemPowerDelegated { get; set; }

        /// <summary>
        /// the name of the steem account receiving the deelgation
        /// </summary>
        /// <value>the name of the steem account receiving the deelgation</value>
        [Required]
        [DataMember(Name="steemAccount")]
        public string SteemAccount { get; set; }

        /// <summary>
        /// the time the delegation will end if not extended
        /// </summary>
        /// <value>the time the delegation will end if not extended</value>
        [Required]
        [DataMember(Name="endTime")]
        public string EndTime { get; set; }

        /// <summary>
        /// the coin type the user wants to send to extend their delegation
        /// </summary>
        /// <value>the coin type the user wants to send to extend their delegation</value>
        [Required]
        [DataMember(Name="inputCoinType")]
        public string InputCoinType { get; set; }

        /// <summary>
        /// the current amount of inputCoinType the user needs to send to extend this delegation for 30 days
        /// </summary>
        /// <value>the current amount of inputCoinType the user needs to send to extend this delegation for 30 days</value>
        [Required]
        [DataMember(Name="costFor30DayExtension")]
        public string CostFor30DayExtension { get; set; }

        /// <summary>
        /// the current amount of inputCoinType the user needs to send to extend this delegation for 90 days
        /// </summary>
        /// <value>the current amount of inputCoinType the user needs to send to extend this delegation for 90 days</value>
        [Required]
        [DataMember(Name="costFor90DayExtension")]
        public string CostFor90DayExtension { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DelegationExtensionEstimate {\n");
            sb.Append("  DelegationId: ").Append(DelegationId).Append("\n");
            sb.Append("  VestsDelegated: ").Append(VestsDelegated).Append("\n");
            sb.Append("  SteemPowerDelegated: ").Append(SteemPowerDelegated).Append("\n");
            sb.Append("  SteemAccount: ").Append(SteemAccount).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  InputCoinType: ").Append(InputCoinType).Append("\n");
            sb.Append("  CostFor30DayExtension: ").Append(CostFor30DayExtension).Append("\n");
            sb.Append("  CostFor90DayExtension: ").Append(CostFor90DayExtension).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DelegationExtensionEstimate)obj);
        }

        /// <summary>
        /// Returns true if DelegationExtensionEstimate instances are equal
        /// </summary>
        /// <param name="other">Instance of DelegationExtensionEstimate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DelegationExtensionEstimate other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DelegationId == other.DelegationId ||
                    DelegationId != null &&
                    DelegationId.Equals(other.DelegationId)
                ) && 
                (
                    VestsDelegated == other.VestsDelegated ||
                    VestsDelegated != null &&
                    VestsDelegated.Equals(other.VestsDelegated)
                ) && 
                (
                    SteemPowerDelegated == other.SteemPowerDelegated ||
                    SteemPowerDelegated != null &&
                    SteemPowerDelegated.Equals(other.SteemPowerDelegated)
                ) && 
                (
                    SteemAccount == other.SteemAccount ||
                    SteemAccount != null &&
                    SteemAccount.Equals(other.SteemAccount)
                ) && 
                (
                    EndTime == other.EndTime ||
                    EndTime != null &&
                    EndTime.Equals(other.EndTime)
                ) && 
                (
                    InputCoinType == other.InputCoinType ||
                    InputCoinType != null &&
                    InputCoinType.Equals(other.InputCoinType)
                ) && 
                (
                    CostFor30DayExtension == other.CostFor30DayExtension ||
                    CostFor30DayExtension != null &&
                    CostFor30DayExtension.Equals(other.CostFor30DayExtension)
                ) && 
                (
                    CostFor90DayExtension == other.CostFor90DayExtension ||
                    CostFor90DayExtension != null &&
                    CostFor90DayExtension.Equals(other.CostFor90DayExtension)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DelegationId != null)
                    hashCode = hashCode * 59 + DelegationId.GetHashCode();
                    if (VestsDelegated != null)
                    hashCode = hashCode * 59 + VestsDelegated.GetHashCode();
                    if (SteemPowerDelegated != null)
                    hashCode = hashCode * 59 + SteemPowerDelegated.GetHashCode();
                    if (SteemAccount != null)
                    hashCode = hashCode * 59 + SteemAccount.GetHashCode();
                    if (EndTime != null)
                    hashCode = hashCode * 59 + EndTime.GetHashCode();
                    if (InputCoinType != null)
                    hashCode = hashCode * 59 + InputCoinType.GetHashCode();
                    if (CostFor30DayExtension != null)
                    hashCode = hashCode * 59 + CostFor30DayExtension.GetHashCode();
                    if (CostFor90DayExtension != null)
                    hashCode = hashCode * 59 + CostFor90DayExtension.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DelegationExtensionEstimate left, DelegationExtensionEstimate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DelegationExtensionEstimate left, DelegationExtensionEstimate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
