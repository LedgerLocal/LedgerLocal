/*
 * Restler API Explorer
 *
 * Live API Documentation
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// DeclarationsModel1 Model
    /// </summary>
    [DataContract]
    public partial class DeclarationsModel1 : IEquatable<DeclarationsModel1>
    { 
        /// <summary>
        /// Gets or Sets DeclarationTypeId
        /// </summary>
        [Required]
        [DataMember(Name="declarationTypeId")]
        public string DeclarationTypeId { get; set; }

        /// <summary>
        /// Gets or Sets Answer
        /// </summary>
        [Required]
        [DataMember(Name="answer")]
        public bool? Answer { get; set; }

        /// <summary>
        /// the token identifying the session
        /// </summary>
        /// <value>the token identifying the session</value>
        [Required]
        [DataMember(Name="sessionToken")]
        public string SessionToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeclarationsModel1 {\n");
            sb.Append("  DeclarationTypeId: ").Append(DeclarationTypeId).Append("\n");
            sb.Append("  Answer: ").Append(Answer).Append("\n");
            sb.Append("  SessionToken: ").Append(SessionToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DeclarationsModel1)obj);
        }

        /// <summary>
        /// Returns true if DeclarationsModel1 instances are equal
        /// </summary>
        /// <param name="other">Instance of DeclarationsModel1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeclarationsModel1 other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DeclarationTypeId == other.DeclarationTypeId ||
                    DeclarationTypeId != null &&
                    DeclarationTypeId.Equals(other.DeclarationTypeId)
                ) && 
                (
                    Answer == other.Answer ||
                    Answer != null &&
                    Answer.Equals(other.Answer)
                ) && 
                (
                    SessionToken == other.SessionToken ||
                    SessionToken != null &&
                    SessionToken.Equals(other.SessionToken)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DeclarationTypeId != null)
                    hashCode = hashCode * 59 + DeclarationTypeId.GetHashCode();
                    if (Answer != null)
                    hashCode = hashCode * 59 + Answer.GetHashCode();
                    if (SessionToken != null)
                    hashCode = hashCode * 59 + SessionToken.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DeclarationsModel1 left, DeclarationsModel1 right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DeclarationsModel1 left, DeclarationsModel1 right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
