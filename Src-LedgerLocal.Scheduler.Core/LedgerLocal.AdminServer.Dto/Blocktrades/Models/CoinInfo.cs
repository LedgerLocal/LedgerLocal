/*
 * Restler API Explorer
 *
 * Live API Documentation
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// CoinInfo Model
    /// </summary>
    [DataContract]
    public partial class CoinInfo : IEquatable<CoinInfo>
    { 
        /// <summary>
        /// A string that uniquely identifies this cryptocoin type. This is used whenever you want to refer to a specific cryptocoin type in the BlockTrades API.
        /// </summary>
        /// <value>A string that uniquely identifies this cryptocoin type. This is used whenever you want to refer to a specific cryptocoin type in the BlockTrades API.</value>
        [Required]
        [DataMember(Name="coinType")]
        public string CoinType { get; set; }

        /// <summary>
        /// a symbol used to identify wallet of this coin type, i.e., BitShares 2.0 for BitShares
        /// </summary>
        /// <value>a symbol used to identify wallet of this coin type, i.e., BitShares 2.0 for BitShares</value>
        [Required]
        [DataMember(Name="walletName")]
        public string WalletName { get; set; }

        /// <summary>
        /// The common name of this cryptocoin, suitable for displaying to the user
        /// </summary>
        /// <value>The common name of this cryptocoin, suitable for displaying to the user</value>
        [Required]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// a symbol used to identify this coin type, i.e., BTC for Bitcoin
        /// </summary>
        /// <value>a symbol used to identify this coin type, i.e., BTC for Bitcoin</value>
        [Required]
        [DataMember(Name="symbol")]
        public string Symbol { get; set; }

        /// <summary>
        /// symbol this coin&#39;s native wallet uses to identify it. This matters for chains like BitShares which have multiple named asset types. For other single-currency chains like Bitcoin, this field does not have a well-defined value (i.e., it may be null, or the native wallet may not have a single unique string it uses to identify the currency)
        /// </summary>
        /// <value>symbol this coin&#39;s native wallet uses to identify it. This matters for chains like BitShares which have multiple named asset types. For other single-currency chains like Bitcoin, this field does not have a well-defined value (i.e., it may be null, or the native wallet may not have a single unique string it uses to identify the currency)</value>
        [Required]
        [DataMember(Name="walletSymbol")]
        public string WalletSymbol { get; set; }

        /// <summary>
        /// The type of wallet this cryptocoin uses
        /// </summary>
        /// <value>The type of wallet this cryptocoin uses</value>
        [Required]
        [DataMember(Name="walletType")]
        public string WalletType { get; set; }

        /// <summary>
        /// The fixed transaction fee charged for each transaction (in units of this cryptocoin type)
        /// </summary>
        /// <value>The fixed transaction fee charged for each transaction (in units of this cryptocoin type)</value>
        [Required]
        [DataMember(Name="transactionFee")]
        public string TransactionFee { get; set; }

        /// <summary>
        /// The number of &#39;satoshis&#39; that make up one nominal unit of this cryptocoin
        /// </summary>
        /// <value>The number of &#39;satoshis&#39; that make up one nominal unit of this cryptocoin</value>
        [Required]
        [DataMember(Name="precision")]
        public string Precision { get; set; }

        /// <summary>
        /// For backed assets (like TRADE.BTC), this is the coin type of the backing asset (BTC) For non-backed assets like BTS, it will be &#39;null&#39;.
        /// </summary>
        /// <value>For backed assets (like TRADE.BTC), this is the coin type of the backing asset (BTC) For non-backed assets like BTS, it will be &#39;null&#39;.</value>
        [Required]
        [DataMember(Name="backingCoinType")]
        public string BackingCoinType { get; set; }

        /// <summary>
        /// True if BlockTrades can send a memo with outputs to this coin type
        /// </summary>
        /// <value>True if BlockTrades can send a memo with outputs to this coin type</value>
        [Required]
        [DataMember(Name="supportsOutputMemos")]
        public string SupportsOutputMemos { get; set; }

        /// <summary>
        /// True if there are required declarations for this coin type
        /// </summary>
        /// <value>True if there are required declarations for this coin type</value>
        [Required]
        [DataMember(Name="restricted")]
        public string Restricted { get; set; }

        /// <summary>
        /// True if the user is allowed to use this coin type, false if the user is prohibited from using this coin type, null if the user hasn&#39;t provided us enough information to determine whether they are allowed to use this coin type
        /// </summary>
        /// <value>True if the user is allowed to use this coin type, false if the user is prohibited from using this coin type, null if the user hasn&#39;t provided us enough information to determine whether they are allowed to use this coin type</value>
        [DataMember(Name="authorized")]
        public string Authorized { get; set; }

        /// <summary>
        /// List of reasons the user is not authorized for this coin type (if restricted and not authorized)
        /// </summary>
        /// <value>List of reasons the user is not authorized for this coin type (if restricted and not authorized)</value>
        [DataMember(Name="notAuthorizedReasons")]
        public List<string> NotAuthorizedReasons { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CoinInfo {\n");
            sb.Append("  CoinType: ").Append(CoinType).Append("\n");
            sb.Append("  WalletName: ").Append(WalletName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  WalletSymbol: ").Append(WalletSymbol).Append("\n");
            sb.Append("  WalletType: ").Append(WalletType).Append("\n");
            sb.Append("  TransactionFee: ").Append(TransactionFee).Append("\n");
            sb.Append("  Precision: ").Append(Precision).Append("\n");
            sb.Append("  BackingCoinType: ").Append(BackingCoinType).Append("\n");
            sb.Append("  SupportsOutputMemos: ").Append(SupportsOutputMemos).Append("\n");
            sb.Append("  Restricted: ").Append(Restricted).Append("\n");
            sb.Append("  Authorized: ").Append(Authorized).Append("\n");
            sb.Append("  NotAuthorizedReasons: ").Append(NotAuthorizedReasons).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CoinInfo)obj);
        }

        /// <summary>
        /// Returns true if CoinInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of CoinInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CoinInfo other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CoinType == other.CoinType ||
                    CoinType != null &&
                    CoinType.Equals(other.CoinType)
                ) && 
                (
                    WalletName == other.WalletName ||
                    WalletName != null &&
                    WalletName.Equals(other.WalletName)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Symbol == other.Symbol ||
                    Symbol != null &&
                    Symbol.Equals(other.Symbol)
                ) && 
                (
                    WalletSymbol == other.WalletSymbol ||
                    WalletSymbol != null &&
                    WalletSymbol.Equals(other.WalletSymbol)
                ) && 
                (
                    WalletType == other.WalletType ||
                    WalletType != null &&
                    WalletType.Equals(other.WalletType)
                ) && 
                (
                    TransactionFee == other.TransactionFee ||
                    TransactionFee != null &&
                    TransactionFee.Equals(other.TransactionFee)
                ) && 
                (
                    Precision == other.Precision ||
                    Precision != null &&
                    Precision.Equals(other.Precision)
                ) && 
                (
                    BackingCoinType == other.BackingCoinType ||
                    BackingCoinType != null &&
                    BackingCoinType.Equals(other.BackingCoinType)
                ) && 
                (
                    SupportsOutputMemos == other.SupportsOutputMemos ||
                    SupportsOutputMemos != null &&
                    SupportsOutputMemos.Equals(other.SupportsOutputMemos)
                ) && 
                (
                    Restricted == other.Restricted ||
                    Restricted != null &&
                    Restricted.Equals(other.Restricted)
                ) && 
                (
                    Authorized == other.Authorized ||
                    Authorized != null &&
                    Authorized.Equals(other.Authorized)
                ) && 
                (
                    NotAuthorizedReasons == other.NotAuthorizedReasons ||
                    NotAuthorizedReasons != null &&
                    NotAuthorizedReasons.SequenceEqual(other.NotAuthorizedReasons)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CoinType != null)
                    hashCode = hashCode * 59 + CoinType.GetHashCode();
                    if (WalletName != null)
                    hashCode = hashCode * 59 + WalletName.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Symbol != null)
                    hashCode = hashCode * 59 + Symbol.GetHashCode();
                    if (WalletSymbol != null)
                    hashCode = hashCode * 59 + WalletSymbol.GetHashCode();
                    if (WalletType != null)
                    hashCode = hashCode * 59 + WalletType.GetHashCode();
                    if (TransactionFee != null)
                    hashCode = hashCode * 59 + TransactionFee.GetHashCode();
                    if (Precision != null)
                    hashCode = hashCode * 59 + Precision.GetHashCode();
                    if (BackingCoinType != null)
                    hashCode = hashCode * 59 + BackingCoinType.GetHashCode();
                    if (SupportsOutputMemos != null)
                    hashCode = hashCode * 59 + SupportsOutputMemos.GetHashCode();
                    if (Restricted != null)
                    hashCode = hashCode * 59 + Restricted.GetHashCode();
                    if (Authorized != null)
                    hashCode = hashCode * 59 + Authorized.GetHashCode();
                    if (NotAuthorizedReasons != null)
                    hashCode = hashCode * 59 + NotAuthorizedReasons.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CoinInfo left, CoinInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CoinInfo left, CoinInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
