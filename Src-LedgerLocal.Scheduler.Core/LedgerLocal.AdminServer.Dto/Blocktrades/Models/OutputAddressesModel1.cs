/*
 * Restler API Explorer
 *
 * Live API Documentation
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// OutputAddressesModel1 Model
    /// </summary>
    [DataContract]
    public partial class OutputAddressesModel1 : IEquatable<OutputAddressesModel1>
    { 
        /// <summary>
        /// the address to register
        /// </summary>
        /// <value>the address to register</value>
        [Required]
        [DataMember(Name="address")]
        public string Address { get; set; }

        /// <summary>
        /// the memo to send in transfers to this address (on blockchains that support memos)
        /// </summary>
        /// <value>the memo to send in transfers to this address (on blockchains that support memos)</value>
        [DataMember(Name="memo")]
        public string Memo { get; set; }

        /// <summary>
        /// a unique name for this address
        /// </summary>
        /// <value>a unique name for this address</value>
        [DataMember(Name="nickname")]
        public string Nickname { get; set; }

        /// <summary>
        /// the wallet type this address will be used with
        /// </summary>
        /// <value>the wallet type this address will be used with</value>
        [Required]
        [DataMember(Name="walletType")]
        public string WalletType { get; set; }

        /// <summary>
        /// the token identifying the session
        /// </summary>
        /// <value>the token identifying the session</value>
        [Required]
        [DataMember(Name="sessionToken")]
        public string SessionToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OutputAddressesModel1 {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Memo: ").Append(Memo).Append("\n");
            sb.Append("  Nickname: ").Append(Nickname).Append("\n");
            sb.Append("  WalletType: ").Append(WalletType).Append("\n");
            sb.Append("  SessionToken: ").Append(SessionToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OutputAddressesModel1)obj);
        }

        /// <summary>
        /// Returns true if OutputAddressesModel1 instances are equal
        /// </summary>
        /// <param name="other">Instance of OutputAddressesModel1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OutputAddressesModel1 other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Address == other.Address ||
                    Address != null &&
                    Address.Equals(other.Address)
                ) && 
                (
                    Memo == other.Memo ||
                    Memo != null &&
                    Memo.Equals(other.Memo)
                ) && 
                (
                    Nickname == other.Nickname ||
                    Nickname != null &&
                    Nickname.Equals(other.Nickname)
                ) && 
                (
                    WalletType == other.WalletType ||
                    WalletType != null &&
                    WalletType.Equals(other.WalletType)
                ) && 
                (
                    SessionToken == other.SessionToken ||
                    SessionToken != null &&
                    SessionToken.Equals(other.SessionToken)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Address != null)
                    hashCode = hashCode * 59 + Address.GetHashCode();
                    if (Memo != null)
                    hashCode = hashCode * 59 + Memo.GetHashCode();
                    if (Nickname != null)
                    hashCode = hashCode * 59 + Nickname.GetHashCode();
                    if (WalletType != null)
                    hashCode = hashCode * 59 + WalletType.GetHashCode();
                    if (SessionToken != null)
                    hashCode = hashCode * 59 + SessionToken.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OutputAddressesModel1 left, OutputAddressesModel1 right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OutputAddressesModel1 left, OutputAddressesModel1 right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
