/*
 * Restler API Explorer
 *
 * Live API Documentation
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// UserInfo Model
    /// </summary>
    [DataContract]
    public partial class UserInfo : IEquatable<UserInfo>
    { 
        /// <summary>
        /// The email of the user, or null if this is an unregistered user
        /// </summary>
        /// <value>The email of the user, or null if this is an unregistered user</value>
        [Required]
        [DataMember(Name="email")]
        public string Email { get; set; }

        /// <summary>
        /// An id that uniquely identifies this user account
        /// </summary>
        /// <value>An id that uniquely identifies this user account</value>
        [Required]
        [DataMember(Name="userId")]
        public string UserId { get; set; }

        /// <summary>
        /// the user&#39;s preferred timezone for displaying date and time in the GUI. This can be any standard time zone string like \&quot;America/New_York\&quot;, or null if the user has never set a preference
        /// </summary>
        /// <value>the user&#39;s preferred timezone for displaying date and time in the GUI. This can be any standard time zone string like \&quot;America/New_York\&quot;, or null if the user has never set a preference</value>
        [Required]
        [DataMember(Name="timeZone")]
        public string TimeZone { get; set; }

        /// <summary>
        /// true if the user has validated their email address, false otherwise
        /// </summary>
        /// <value>true if the user has validated their email address, false otherwise</value>
        [Required]
        [DataMember(Name="activated")]
        public string Activated { get; set; }

        /// <summary>
        /// the time the user&#39;s record was created
        /// </summary>
        /// <value>the time the user&#39;s record was created</value>
        [Required]
        [DataMember(Name="creationTime")]
        public string CreationTime { get; set; }

        /// <summary>
        /// the time the user&#39;s record was last updated
        /// </summary>
        /// <value>the time the user&#39;s record was last updated</value>
        [Required]
        [DataMember(Name="lastModifiedTime")]
        public string LastModifiedTime { get; set; }

        /// <summary>
        /// the time the user last logged in
        /// </summary>
        /// <value>the time the user last logged in</value>
        [Required]
        [DataMember(Name="lastLoginTime")]
        public string LastLoginTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserInfo {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  TimeZone: ").Append(TimeZone).Append("\n");
            sb.Append("  Activated: ").Append(Activated).Append("\n");
            sb.Append("  CreationTime: ").Append(CreationTime).Append("\n");
            sb.Append("  LastModifiedTime: ").Append(LastModifiedTime).Append("\n");
            sb.Append("  LastLoginTime: ").Append(LastLoginTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UserInfo)obj);
        }

        /// <summary>
        /// Returns true if UserInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of UserInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserInfo other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Email == other.Email ||
                    Email != null &&
                    Email.Equals(other.Email)
                ) && 
                (
                    UserId == other.UserId ||
                    UserId != null &&
                    UserId.Equals(other.UserId)
                ) && 
                (
                    TimeZone == other.TimeZone ||
                    TimeZone != null &&
                    TimeZone.Equals(other.TimeZone)
                ) && 
                (
                    Activated == other.Activated ||
                    Activated != null &&
                    Activated.Equals(other.Activated)
                ) && 
                (
                    CreationTime == other.CreationTime ||
                    CreationTime != null &&
                    CreationTime.Equals(other.CreationTime)
                ) && 
                (
                    LastModifiedTime == other.LastModifiedTime ||
                    LastModifiedTime != null &&
                    LastModifiedTime.Equals(other.LastModifiedTime)
                ) && 
                (
                    LastLoginTime == other.LastLoginTime ||
                    LastLoginTime != null &&
                    LastLoginTime.Equals(other.LastLoginTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                    if (UserId != null)
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                    if (TimeZone != null)
                    hashCode = hashCode * 59 + TimeZone.GetHashCode();
                    if (Activated != null)
                    hashCode = hashCode * 59 + Activated.GetHashCode();
                    if (CreationTime != null)
                    hashCode = hashCode * 59 + CreationTime.GetHashCode();
                    if (LastModifiedTime != null)
                    hashCode = hashCode * 59 + LastModifiedTime.GetHashCode();
                    if (LastLoginTime != null)
                    hashCode = hashCode * 59 + LastLoginTime.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UserInfo left, UserInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UserInfo left, UserInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
