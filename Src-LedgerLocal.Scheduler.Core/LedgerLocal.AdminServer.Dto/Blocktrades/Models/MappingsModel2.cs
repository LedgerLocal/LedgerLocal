/*
 * Restler API Explorer
 *
 * Live API Documentation
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// MappingsModel2 Model
    /// </summary>
    [DataContract]
    public partial class MappingsModel2 : IEquatable<MappingsModel2>
    { 
        /// <summary>
        /// the new input address for this mapping (if null, the mapping will keep the original input address) As always, if this address is in a wallet where inputs are made to a common account and distinguished by memos, this will be the memo)
        /// </summary>
        /// <value>the new input address for this mapping (if null, the mapping will keep the original input address) As always, if this address is in a wallet where inputs are made to a common account and distinguished by memos, this will be the memo)</value>
        [DataMember(Name="inputAddress")]
        public string InputAddress { get; set; }

        /// <summary>
        /// the new input coin type for this mapping (if null, the mapping will keep the original input coin type)
        /// </summary>
        /// <value>the new input coin type for this mapping (if null, the mapping will keep the original input coin type)</value>
        [DataMember(Name="inputCoinType")]
        public string InputCoinType { get; set; }

        /// <summary>
        /// the nickname of the new output address where the converted funds should be sent (if null, the mapping will keep the original output address)
        /// </summary>
        /// <value>the nickname of the new output address where the converted funds should be sent (if null, the mapping will keep the original output address)</value>
        [DataMember(Name="outputAddressNickname")]
        public string OutputAddressNickname { get; set; }

        /// <summary>
        /// the new output coin type for this mapping (if null, the mapping will keep the original output coin type)
        /// </summary>
        /// <value>the new output coin type for this mapping (if null, the mapping will keep the original output coin type)</value>
        [DataMember(Name="outputCoinType")]
        public string OutputCoinType { get; set; }

        /// <summary>
        /// the nickname of the output address where the refunds will be sent for this mapping (if null, the mapping will keep the original refund address, if any)
        /// </summary>
        /// <value>the nickname of the output address where the refunds will be sent for this mapping (if null, the mapping will keep the original refund address, if any)</value>
        [DataMember(Name="refundAddressNickname")]
        public string RefundAddressNickname { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MappingsModel2 {\n");
            sb.Append("  InputAddress: ").Append(InputAddress).Append("\n");
            sb.Append("  InputCoinType: ").Append(InputCoinType).Append("\n");
            sb.Append("  OutputAddressNickname: ").Append(OutputAddressNickname).Append("\n");
            sb.Append("  OutputCoinType: ").Append(OutputCoinType).Append("\n");
            sb.Append("  RefundAddressNickname: ").Append(RefundAddressNickname).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MappingsModel2)obj);
        }

        /// <summary>
        /// Returns true if MappingsModel2 instances are equal
        /// </summary>
        /// <param name="other">Instance of MappingsModel2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MappingsModel2 other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    InputAddress == other.InputAddress ||
                    InputAddress != null &&
                    InputAddress.Equals(other.InputAddress)
                ) && 
                (
                    InputCoinType == other.InputCoinType ||
                    InputCoinType != null &&
                    InputCoinType.Equals(other.InputCoinType)
                ) && 
                (
                    OutputAddressNickname == other.OutputAddressNickname ||
                    OutputAddressNickname != null &&
                    OutputAddressNickname.Equals(other.OutputAddressNickname)
                ) && 
                (
                    OutputCoinType == other.OutputCoinType ||
                    OutputCoinType != null &&
                    OutputCoinType.Equals(other.OutputCoinType)
                ) && 
                (
                    RefundAddressNickname == other.RefundAddressNickname ||
                    RefundAddressNickname != null &&
                    RefundAddressNickname.Equals(other.RefundAddressNickname)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (InputAddress != null)
                    hashCode = hashCode * 59 + InputAddress.GetHashCode();
                    if (InputCoinType != null)
                    hashCode = hashCode * 59 + InputCoinType.GetHashCode();
                    if (OutputAddressNickname != null)
                    hashCode = hashCode * 59 + OutputAddressNickname.GetHashCode();
                    if (OutputCoinType != null)
                    hashCode = hashCode * 59 + OutputCoinType.GetHashCode();
                    if (RefundAddressNickname != null)
                    hashCode = hashCode * 59 + RefundAddressNickname.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MappingsModel2 left, MappingsModel2 right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MappingsModel2 left, MappingsModel2 right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
