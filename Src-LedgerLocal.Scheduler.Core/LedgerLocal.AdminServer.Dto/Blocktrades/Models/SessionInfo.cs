/*
 * Restler API Explorer
 *
 * Live API Documentation
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// SessionInfo Model
    /// </summary>
    [DataContract]
    public partial class SessionInfo : IEquatable<SessionInfo>
    { 
        /// <summary>
        /// the token identifying this session
        /// </summary>
        /// <value>the token identifying this session</value>
        [Required]
        [DataMember(Name="token")]
        public string Token { get; set; }

        /// <summary>
        /// Info about the user associated with this session. All sessions have a user account associated with them; if the session is unregistered, a anonymous user record will be created to track the session
        /// </summary>
        /// <value>Info about the user associated with this session. All sessions have a user account associated with them; if the session is unregistered, a anonymous user record will be created to track the session</value>
        [Required]
        [DataMember(Name="user")]
        public UserInfo User { get; set; }

        /// <summary>
        /// The time the session will expire (unless it is extended before that time)
        /// </summary>
        /// <value>The time the session will expire (unless it is extended before that time)</value>
        [Required]
        [DataMember(Name="expirationTime")]
        public string ExpirationTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SessionInfo {\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  ExpirationTime: ").Append(ExpirationTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SessionInfo)obj);
        }

        /// <summary>
        /// Returns true if SessionInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of SessionInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SessionInfo other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Token == other.Token ||
                    Token != null &&
                    Token.Equals(other.Token)
                ) && 
                (
                    User == other.User ||
                    User != null &&
                    User.Equals(other.User)
                ) && 
                (
                    ExpirationTime == other.ExpirationTime ||
                    ExpirationTime != null &&
                    ExpirationTime.Equals(other.ExpirationTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Token != null)
                    hashCode = hashCode * 59 + Token.GetHashCode();
                    if (User != null)
                    hashCode = hashCode * 59 + User.GetHashCode();
                    if (ExpirationTime != null)
                    hashCode = hashCode * 59 + ExpirationTime.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SessionInfo left, SessionInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SessionInfo left, SessionInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
