/*
 * Restler API Explorer
 *
 * Live API Documentation
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// InitiateFixedPriceTradeModel1 Model
    /// </summary>
    [DataContract]
    public partial class InitiateFixedPriceTradeModel1 : IEquatable<InitiateFixedPriceTradeModel1>
    { 
        /// <summary>
        /// the type of coin which the user wishes to trade
        /// </summary>
        /// <value>the type of coin which the user wishes to trade</value>
        [Required]
        [DataMember(Name="inputCoinType")]
        public string InputCoinType { get; set; }

        /// <summary>
        /// the type of coin the user wishes to receive as a result of the trade
        /// </summary>
        /// <value>the type of coin the user wishes to receive as a result of the trade</value>
        [Required]
        [DataMember(Name="outputCoinType")]
        public string OutputCoinType { get; set; }

        /// <summary>
        /// the output address where the converted funds should be sent
        /// </summary>
        /// <value>the output address where the converted funds should be sent</value>
        [Required]
        [DataMember(Name="outputAddress")]
        public string OutputAddress { get; set; }

        /// <summary>
        /// the amount of the outputCoinType you would like to receive
        /// </summary>
        /// <value>the amount of the outputCoinType you would like to receive</value>
        [Required]
        [DataMember(Name="desiredOutputAmount")]
        public string DesiredOutputAmount { get; set; }

        /// <summary>
        /// if true, will only send output if the entire quoted input amount is deposited
        /// </summary>
        /// <value>if true, will only send output if the entire quoted input amount is deposited</value>
        [Required]
        [DataMember(Name="allOrNothing")]
        public bool? AllOrNothing { get; set; }

        /// <summary>
        /// the memo to be sent with all outputs to this address (on blockchains that support memos)
        /// </summary>
        /// <value>the memo to be sent with all outputs to this address (on blockchains that support memos)</value>
        [DataMember(Name="outputMemo")]
        public string OutputMemo { get; set; }

        /// <summary>
        /// the nickname of the refund address where unconverted funds should be sent. Refunds are currently processed manually.
        /// </summary>
        /// <value>the nickname of the refund address where unconverted funds should be sent. Refunds are currently processed manually.</value>
        [Required]
        [DataMember(Name="refundAddress")]
        public string RefundAddress { get; set; }

        /// <summary>
        /// the memo to be sent with all outputs to this refund address (on blockchains that support memos)
        /// </summary>
        /// <value>the memo to be sent with all outputs to this refund address (on blockchains that support memos)</value>
        [DataMember(Name="inputAddressType")]
        public string InputAddressType { get; set; }

        /// <summary>
        /// the type of input address to use, either \&quot;unique_address\&quot; or \&quot;shared_address_with_memo\&quot;. If you do not supply this parameter, the default for the input wallet will be used. Generally, the default will be what want.
        /// </summary>
        /// <value>the type of input address to use, either \&quot;unique_address\&quot; or \&quot;shared_address_with_memo\&quot;. If you do not supply this parameter, the default for the input wallet will be used. Generally, the default will be what want.</value>
        [DataMember(Name="refundMemo")]
        public string RefundMemo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InitiateFixedPriceTradeModel1 {\n");
            sb.Append("  InputCoinType: ").Append(InputCoinType).Append("\n");
            sb.Append("  OutputCoinType: ").Append(OutputCoinType).Append("\n");
            sb.Append("  OutputAddress: ").Append(OutputAddress).Append("\n");
            sb.Append("  DesiredOutputAmount: ").Append(DesiredOutputAmount).Append("\n");
            sb.Append("  AllOrNothing: ").Append(AllOrNothing).Append("\n");
            sb.Append("  OutputMemo: ").Append(OutputMemo).Append("\n");
            sb.Append("  RefundAddress: ").Append(RefundAddress).Append("\n");
            sb.Append("  InputAddressType: ").Append(InputAddressType).Append("\n");
            sb.Append("  RefundMemo: ").Append(RefundMemo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InitiateFixedPriceTradeModel1)obj);
        }

        /// <summary>
        /// Returns true if InitiateFixedPriceTradeModel1 instances are equal
        /// </summary>
        /// <param name="other">Instance of InitiateFixedPriceTradeModel1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InitiateFixedPriceTradeModel1 other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    InputCoinType == other.InputCoinType ||
                    InputCoinType != null &&
                    InputCoinType.Equals(other.InputCoinType)
                ) && 
                (
                    OutputCoinType == other.OutputCoinType ||
                    OutputCoinType != null &&
                    OutputCoinType.Equals(other.OutputCoinType)
                ) && 
                (
                    OutputAddress == other.OutputAddress ||
                    OutputAddress != null &&
                    OutputAddress.Equals(other.OutputAddress)
                ) && 
                (
                    DesiredOutputAmount == other.DesiredOutputAmount ||
                    DesiredOutputAmount != null &&
                    DesiredOutputAmount.Equals(other.DesiredOutputAmount)
                ) && 
                (
                    AllOrNothing == other.AllOrNothing ||
                    AllOrNothing != null &&
                    AllOrNothing.Equals(other.AllOrNothing)
                ) && 
                (
                    OutputMemo == other.OutputMemo ||
                    OutputMemo != null &&
                    OutputMemo.Equals(other.OutputMemo)
                ) && 
                (
                    RefundAddress == other.RefundAddress ||
                    RefundAddress != null &&
                    RefundAddress.Equals(other.RefundAddress)
                ) && 
                (
                    InputAddressType == other.InputAddressType ||
                    InputAddressType != null &&
                    InputAddressType.Equals(other.InputAddressType)
                ) && 
                (
                    RefundMemo == other.RefundMemo ||
                    RefundMemo != null &&
                    RefundMemo.Equals(other.RefundMemo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (InputCoinType != null)
                    hashCode = hashCode * 59 + InputCoinType.GetHashCode();
                    if (OutputCoinType != null)
                    hashCode = hashCode * 59 + OutputCoinType.GetHashCode();
                    if (OutputAddress != null)
                    hashCode = hashCode * 59 + OutputAddress.GetHashCode();
                    if (DesiredOutputAmount != null)
                    hashCode = hashCode * 59 + DesiredOutputAmount.GetHashCode();
                    if (AllOrNothing != null)
                    hashCode = hashCode * 59 + AllOrNothing.GetHashCode();
                    if (OutputMemo != null)
                    hashCode = hashCode * 59 + OutputMemo.GetHashCode();
                    if (RefundAddress != null)
                    hashCode = hashCode * 59 + RefundAddress.GetHashCode();
                    if (InputAddressType != null)
                    hashCode = hashCode * 59 + InputAddressType.GetHashCode();
                    if (RefundMemo != null)
                    hashCode = hashCode * 59 + RefundMemo.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InitiateFixedPriceTradeModel1 left, InitiateFixedPriceTradeModel1 right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InitiateFixedPriceTradeModel1 left, InitiateFixedPriceTradeModel1 right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
